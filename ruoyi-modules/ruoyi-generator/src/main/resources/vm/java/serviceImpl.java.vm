package ${packageName}.service.impl;

import org.dromara.common.core.utils.MapstructUtils;
import org.dromara.common.core.utils.StringUtils;
#if($table.crud)
import org.dromara.common.mybatis.core.page.TableDataInfo;
import org.dromara.common.mybatis.core.page.PageQuery;
import com.mybatisflex.core.paginate.Page;
#end
import com.mybatisflex.core.query.QueryWrapper;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import ${packageName}.domain.bo.${ClassName}Bo;
import ${packageName}.domain.vo.${ClassName}Vo;
import ${packageName}.domain.${ClassName};
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.service.I${ClassName}Service;

import java.util.List;
import java.util.Map;
import java.util.Collection;

    #set($TABLE_NAME = ${tableName.toUpperCase()})
import static ${packageName}.domain.table.${ClassName}TableDef.$TABLE_NAME;


/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@RequiredArgsConstructor
@Service
public class ${ClassName}ServiceImpl implements I${ClassName}Service {

    private final ${ClassName}Mapper baseMapper;

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} 主键
     * @return ${functionName}
     */
    @Override
    public ${ClassName}Vo queryById(${pkColumn.javaType} ${pkColumn.javaField}) {
        return baseMapper.selectOneWithRelationsByIdAs(${pkColumn.javaField}, ${ClassName}Vo.class);
    }

#if($table.crud)
    /**
     * 分页查询${functionName}列表
     *
     * @param bo        查询条件
     * @param pageQuery 分页参数
     * @return ${functionName}分页列表
     */
    @Override
    public TableDataInfo<${ClassName}Vo> queryPageList(${ClassName}Bo bo, PageQuery pageQuery) {
        QueryWrapper qw = buildQueryWrapper(bo);
        Page<${ClassName}Vo> result = baseMapper.paginateAs(pageQuery, qw, ${ClassName}Vo.class);
        return TableDataInfo.build(result);
    }
#end

    /**
     * 查询符合条件的${functionName}列表
     *
     * @param bo 查询条件
     * @return ${functionName}列表
     */
    @Override
    public List<${ClassName}Vo> queryList(${ClassName}Bo bo) {
        QueryWrapper qw = buildQueryWrapper(bo);
        return baseMapper.selectListByQueryAs(qw, ${ClassName}Vo.class);
    }

    private QueryWrapper buildQueryWrapper(${ClassName}Bo bo) {
        Map<String, Object> params = bo.getParams();
        return QueryWrapper.create()
            .from($TABLE_NAME)
#set($count = 1)
#set($endCount = 0)
#foreach($column in $columns)
#if($column.query)
    #set($endCount = $endCount + 1)
#end
#end
#foreach($column in $columns)
    #if($column.query)
        #set($queryType=$column.queryType)
        #set($javaField=$column.javaField)
        #set($javaType=$column.javaType)
        #set($columnName=${column.columnName.toUpperCase()})
        #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
        #if($count == 1)
            #set($mfQuery='where')
        #else
            #set($mfQuery='and')
        #end
        #if($count == $endCount)
            #set($end=';')
        #else
            #set($end='')
        #end
        #set($mfMethod=$column.queryType.toLowerCase())
        #if($queryType != 'BETWEEN')
            .$mfQuery($TABLE_NAME.$columnName.$mfMethod(bo.get$AttrName()))$end
        #else
            .$mfQuery($TABLE_NAME.${columnName}.between(params.get("begin$AttrName"), params.get("end$AttrName"), params.get("begin$AttrName") != null && params.get("end$AttrName") != null))$end
        #end
        #set($count = $count + 1)
    #end
#end
    }

    /**
     * 新增${functionName}
     *
     * @param bo ${functionName}
     * @return 是否新增成功
     */
    @Override
    public Boolean insertByBo(${ClassName}Bo bo) {
        ${ClassName} add = MapstructUtils.convert(bo, ${ClassName}.class);
        validEntityBeforeSave(add);
        boolean flag = baseMapper.insert(add, true) > 0;
        #set($pk=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})
        if (flag) {
            bo.set$pk(add.get$pk());
        }
        return flag;
    }

    /**
     * 修改${functionName}
     *
     * @param bo ${functionName}
     * @return 是否修改成功
     */
    @Override
    public Boolean updateByBo(${ClassName}Bo bo) {
        ${ClassName} update = MapstructUtils.convert(bo, ${ClassName}.class);
        validEntityBeforeSave(update);
        return baseMapper.update(update) > 0;
    }

    /**
     * 保存前的数据校验
     */
    private void validEntityBeforeSave(${ClassName} entity) {
        //TODO 做一些数据校验,如唯一约束
    }

    /**
     * 校验并批量删除${functionName}信息
     *
     * @param ids     待删除的主键集合
     * @param isValid 是否进行有效性校验
     * @return 是否删除成功
     */
    @Override
    public Boolean deleteWithValidByIds(Collection<${pkColumn.javaType}> ids, Boolean isValid) {
        if (isValid) {
            //TODO 做一些业务上的校验,判断是否需要校验
        }
        return baseMapper.deleteBatchByIds(ids) > 0;
    }
}
